diff --git a/node_modules/react-native-scrollable-tab-view/Button.web.js b/node_modules/react-native-scrollable-tab-view/Button.web.js
new file mode 100644
index 0000000..c2cc1a4
--- /dev/null
+++ b/node_modules/react-native-scrollable-tab-view/Button.web.js
@@ -0,0 +1,14 @@
+const React = require('react');
+const ReactNative = require('react-native');
+const {
+ TouchableOpacity,
+  View,
+} = ReactNative;
+
+const Button = (props) => {
+  return <TouchableOpacity {...props}>
+    {props.children}
+  </TouchableOpacity>;
+};
+
+module.exports = Button;
diff --git a/node_modules/react-native-scrollable-tab-view/index.js b/node_modules/react-native-scrollable-tab-view/index.js
index af94d86..d4b90ec 100644
--- a/node_modules/react-native-scrollable-tab-view/index.js
+++ b/node_modules/react-native-scrollable-tab-view/index.js
@@ -1,8 +1,8 @@
-const React = require('react');
+const React = require("react");
 const { Component } = React;
-const { ViewPropTypes } = ReactNative = require('react-native');
-const createReactClass = require('create-react-class');
-const PropTypes = require('prop-types');
+const { ViewPropTypes } = (ReactNative = require("react-native"));
+const createReactClass = require("create-react-class");
+const PropTypes = require("prop-types");
 const {
   Dimensions,
   View,
@@ -11,28 +11,34 @@ const {
   Platform,
   StyleSheet,
   ViewPagerAndroid,
-  InteractionManager,
+  InteractionManager
 } = ReactNative;
-const TimerMixin = require('react-timer-mixin');
+const TimerMixin = require("react-timer-mixin");
 
-const SceneComponent = require('./SceneComponent');
-const DefaultTabBar = require('./DefaultTabBar');
-const ScrollableTabBar = require('./ScrollableTabBar');
+const SceneComponent = require("./SceneComponent");
+const DefaultTabBar = require("./DefaultTabBar");
+const ScrollableTabBar = require("./ScrollableTabBar");
 
-const AnimatedViewPagerAndroid = Platform.OS === 'android' ?
-  Animated.createAnimatedComponent(ViewPagerAndroid) :
-  undefined;
+const AnimatedViewPagerAndroid =
+  Platform.OS === "android"
+    ? Animated.createAnimatedComponent(ViewPagerAndroid)
+    : undefined;
 
 const ScrollableTabView = createReactClass({
-  mixins: [TimerMixin, ],
+  mixins: [TimerMixin],
   statics: {
     DefaultTabBar,
-    ScrollableTabBar,
+    ScrollableTabBar
   },
   scrollOnMountCalled: false,
 
   propTypes: {
-    tabBarPosition: PropTypes.oneOf(['top', 'bottom', 'overlayTop', 'overlayBottom', ]),
+    tabBarPosition: PropTypes.oneOf([
+      "top",
+      "bottom",
+      "overlayTop",
+      "overlayBottom"
+    ]),
     initialPage: PropTypes.number,
     page: PropTypes.number,
     onChangeTab: PropTypes.func,
@@ -42,12 +48,12 @@ const ScrollableTabView = createReactClass({
     contentProps: PropTypes.object,
     scrollWithoutAnimation: PropTypes.bool,
     locked: PropTypes.bool,
-    prerenderingSiblingsNumber: PropTypes.number,
+    prerenderingSiblingsNumber: PropTypes.number
   },
 
   getDefaultProps() {
     return {
-      tabBarPosition: 'top',
+      tabBarPosition: "top",
       initialPage: 0,
       page: -1,
       onChangeTab: () => {},
@@ -55,18 +61,18 @@ const ScrollableTabView = createReactClass({
       contentProps: {},
       scrollWithoutAnimation: false,
       locked: false,
-      prerenderingSiblingsNumber: 0,
+      prerenderingSiblingsNumber: 0
     };
   },
 
   getInitialState() {
-    const containerWidth = Dimensions.get('window').width;
+    const containerWidth = Dimensions.get("window").width;
     let scrollValue;
     let scrollXIOS;
     let positionAndroid;
     let offsetAndroid;
 
-    if (Platform.OS === 'ios') {
+    if (Platform.OS === "ios" || Platform.OS === "web") {
       scrollXIOS = new Animated.Value(this.props.initialPage * containerWidth);
       const containerWidthAnimatedValue = new Animated.Value(containerWidth);
       // Need to call __makeNative manually to avoid a native animated bug. See
@@ -75,8 +81,8 @@ const ScrollableTabView = createReactClass({
       scrollValue = Animated.divide(scrollXIOS, containerWidthAnimatedValue);
 
       const callListeners = this._polyfillAnimatedValue(scrollValue);
-      scrollXIOS.addListener(
-        ({ value, }) => callListeners(value / this.state.containerWidth)
+      scrollXIOS.addListener(({ value }) =>
+        callListeners(value / this.state.containerWidth)
       );
     } else {
       positionAndroid = new Animated.Value(this.props.initialPage);
@@ -86,11 +92,11 @@ const ScrollableTabView = createReactClass({
       const callListeners = this._polyfillAnimatedValue(scrollValue);
       let positionAndroidValue = this.props.initialPage;
       let offsetAndroidValue = 0;
-      positionAndroid.addListener(({ value, }) => {
+      positionAndroid.addListener(({ value }) => {
         positionAndroidValue = value;
         callListeners(positionAndroidValue + offsetAndroidValue);
       });
-      offsetAndroid.addListener(({ value, }) => {
+      offsetAndroid.addListener(({ value }) => {
         offsetAndroidValue = value;
         callListeners(positionAndroidValue + offsetAndroidValue);
       });
@@ -103,13 +109,16 @@ const ScrollableTabView = createReactClass({
       positionAndroid,
       offsetAndroid,
       containerWidth,
-      sceneKeys: this.newSceneKeys({ currentPage: this.props.initialPage, }),
+      sceneKeys: this.newSceneKeys({ currentPage: this.props.initialPage })
     };
   },
 
   componentWillReceiveProps(props) {
     if (props.children !== this.props.children) {
-      this.updateSceneKeys({ page: this.state.currentPage, children: props.children, });
+      this.updateSceneKeys({
+        page: this.state.currentPage,
+        children: props.children
+      });
     }
 
     if (props.page >= 0 && props.page !== this.state.currentPage) {
@@ -118,7 +127,7 @@ const ScrollableTabView = createReactClass({
   },
 
   componentWillUnmount() {
-    if (Platform.OS === 'ios') {
+    if (Platform.OS === "ios" || Platform.OS === "web") {
       this.state.scrollXIOS.removeAllListeners();
     } else {
       this.state.positionAndroid.removeAllListeners();
@@ -127,10 +136,14 @@ const ScrollableTabView = createReactClass({
   },
 
   goToPage(pageNumber) {
-    if (Platform.OS === 'ios') {
+    if (Platform.OS === "ios" || Platform.OS === "web") {
       const offset = pageNumber * this.state.containerWidth;
       if (this.scrollView) {
-        this.scrollView.getNode().scrollTo({x: offset, y: 0, animated: !this.props.scrollWithoutAnimation, });
+        this.scrollView.getNode().scrollTo({
+          x: offset,
+          y: 0,
+          animated: !this.props.scrollWithoutAnimation
+        });
       }
     } else {
       if (this.scrollView) {
@@ -145,7 +158,7 @@ const ScrollableTabView = createReactClass({
     const currentPage = this.state.currentPage;
     this.updateSceneKeys({
       page: pageNumber,
-      callback: this._onChangeTab.bind(this, currentPage, pageNumber),
+      callback: this._onChangeTab.bind(this, currentPage, pageNumber)
     });
   },
 
@@ -159,17 +172,31 @@ const ScrollableTabView = createReactClass({
     }
   },
 
-  updateSceneKeys({ page, children = this.props.children, callback = () => {}, }) {
-    let newKeys = this.newSceneKeys({ previousKeys: this.state.sceneKeys, currentPage: page, children, });
-    this.setState({currentPage: page, sceneKeys: newKeys, }, callback);
+  updateSceneKeys({
+    page,
+    children = this.props.children,
+    callback = () => {}
+  }) {
+    let newKeys = this.newSceneKeys({
+      previousKeys: this.state.sceneKeys,
+      currentPage: page,
+      children
+    });
+    this.setState({ currentPage: page, sceneKeys: newKeys }, callback);
   },
 
-  newSceneKeys({ previousKeys = [], currentPage = 0, children = this.props.children, }) {
+  newSceneKeys({
+    previousKeys = [],
+    currentPage = 0,
+    children = this.props.children
+  }) {
     let newKeys = [];
     this._children(children).forEach((child, idx) => {
       let key = this._makeSceneKey(child, idx);
-      if (this._keyExists(previousKeys, key) ||
-        this._shouldRenderSceneKey(idx, currentPage)) {
+      if (
+        this._keyExists(previousKeys, key) ||
+        this._shouldRenderSceneKey(idx, currentPage)
+      ) {
         newKeys.push(key);
       }
     });
@@ -180,13 +207,12 @@ const ScrollableTabView = createReactClass({
   // we have to polyfill it here since a lot of code depends on being able
   // to add a listener to `scrollValue`. See https://github.com/facebook/react-native/pull/12620.
   _polyfillAnimatedValue(animatedValue) {
-
     const listeners = new Set();
-    const addListener = (listener) => {
+    const addListener = listener => {
       listeners.add(listener);
     };
 
-    const removeListener = (listener) => {
+    const removeListener = listener => {
       listeners.delete(listener);
     };
 
@@ -198,88 +224,111 @@ const ScrollableTabView = createReactClass({
     animatedValue.removeListener = removeListener;
     animatedValue.removeAllListeners = removeAllListeners;
 
-    return (value) => listeners.forEach(listener => listener({ value, }));
+    return value => listeners.forEach(listener => listener({ value }));
   },
 
   _shouldRenderSceneKey(idx, currentPageKey) {
     let numOfSibling = this.props.prerenderingSiblingsNumber;
-    return (idx < (currentPageKey + numOfSibling + 1) &&
-      idx > (currentPageKey - numOfSibling - 1));
+    return (
+      idx < currentPageKey + numOfSibling + 1 &&
+      idx > currentPageKey - numOfSibling - 1
+    );
   },
 
   _keyExists(sceneKeys, key) {
-    return sceneKeys.find((sceneKey) => key === sceneKey);
+    return sceneKeys.find(sceneKey => key === sceneKey);
   },
 
   _makeSceneKey(child, idx) {
-    return child.props.tabLabel + '_' + idx;
+    return child.props.tabLabel + "_" + idx;
   },
 
   renderScrollableContent() {
-    if (Platform.OS === 'ios') {
+    if (Platform.OS === "ios" || Platform.OS === "web") {
       const scenes = this._composeScenes();
-      return <Animated.ScrollView
-        horizontal
-        pagingEnabled
-        automaticallyAdjustContentInsets={false}
-        contentOffset={{ x: this.props.initialPage * this.state.containerWidth, }}
-        ref={(scrollView) => { this.scrollView = scrollView; }}
-        onScroll={Animated.event(
-          [{ nativeEvent: { contentOffset: { x: this.state.scrollXIOS, }, }, }, ],
-          { useNativeDriver: true, listener: this._onScroll, }
-        )}
-        onMomentumScrollBegin={this._onMomentumScrollBeginAndEnd}
-        onMomentumScrollEnd={this._onMomentumScrollBeginAndEnd}
-        scrollEventThrottle={16}
-        scrollsToTop={false}
-        showsHorizontalScrollIndicator={false}
-        scrollEnabled={!this.props.locked}
-        directionalLockEnabled
-        alwaysBounceVertical={false}
-        keyboardDismissMode="on-drag"
-        {...this.props.contentProps}
-      >
+      return (
+        <Animated.ScrollView
+          horizontal
+          pagingEnabled
+          automaticallyAdjustContentInsets={false}
+          contentOffset={{
+            x: this.props.initialPage * this.state.containerWidth
+          }}
+          ref={scrollView => {
+            this.scrollView = scrollView;
+          }}
+          onScroll={Animated.event(
+            [{ nativeEvent: { contentOffset: { x: this.state.scrollXIOS } } }],
+            { useNativeDriver: true, listener: this._onScroll }
+          )}
+          onMomentumScrollBegin={this._onMomentumScrollBeginAndEnd}
+          onMomentumScrollEnd={this._onMomentumScrollBeginAndEnd}
+          scrollEventThrottle={16}
+          scrollsToTop={false}
+          showsHorizontalScrollIndicator={false}
+          scrollEnabled={!this.props.locked}
+          directionalLockEnabled
+          alwaysBounceVertical={false}
+          keyboardDismissMode="on-drag"
+          {...this.props.contentProps}
+        >
           {scenes}
-      </Animated.ScrollView>;
+        </Animated.ScrollView>
+      );
     } else {
       const scenes = this._composeScenes();
-      return <AnimatedViewPagerAndroid
-        key={this._children().length}
-        style={styles.scrollableContentAndroid}
-        initialPage={this.props.initialPage}
-        onPageSelected={this._updateSelectedPage}
-        keyboardDismissMode="on-drag"
-        scrollEnabled={!this.props.locked}
-        onPageScroll={Animated.event(
-          [{
-            nativeEvent: {
-              position: this.state.positionAndroid,
-              offset: this.state.offsetAndroid,
-            },
-          }, ],
-          {
-            useNativeDriver: true,
-            listener: this._onScroll,
-          },
-        )}
-        ref={(scrollView) => { this.scrollView = scrollView; }}
-        {...this.props.contentProps}
-      >
-        {scenes}
-      </AnimatedViewPagerAndroid>;
+      return (
+        <AnimatedViewPagerAndroid
+          key={this._children().length}
+          style={styles.scrollableContentAndroid}
+          initialPage={this.props.initialPage}
+          onPageSelected={this._updateSelectedPage}
+          keyboardDismissMode="on-drag"
+          scrollEnabled={!this.props.locked}
+          onPageScroll={Animated.event(
+            [
+              {
+                nativeEvent: {
+                  position: this.state.positionAndroid,
+                  offset: this.state.offsetAndroid
+                }
+              }
+            ],
+            {
+              useNativeDriver: true,
+              listener: this._onScroll
+            }
+          )}
+          ref={scrollView => {
+            this.scrollView = scrollView;
+          }}
+          {...this.props.contentProps}
+        >
+          {scenes}
+        </AnimatedViewPagerAndroid>
+      );
     }
   },
 
   _composeScenes() {
     return this._children().map((child, idx) => {
       let key = this._makeSceneKey(child, idx);
-      return <SceneComponent
-        key={child.key}
-        shouldUpdated={this._shouldRenderSceneKey(idx, this.state.currentPage)}
-        style={{width: this.state.containerWidth, }}
-      >
-        {this._keyExists(this.state.sceneKeys, key) ? child : <View tabLabel={child.props.tabLabel}/>}
-      </SceneComponent>;
+      return (
+        <SceneComponent
+          key={child.key}
+          shouldUpdated={this._shouldRenderSceneKey(
+            idx,
+            this.state.currentPage
+          )}
+          style={{ width: this.state.containerWidth }}
+        >
+          {this._keyExists(this.state.sceneKeys, key) ? (
+            child
+          ) : (
+            <View tabLabel={child.props.tabLabel} />
+          )}
+        </SceneComponent>
+      );
     });
   },
 
@@ -293,14 +342,14 @@ const ScrollableTabView = createReactClass({
 
   _updateSelectedPage(nextPage) {
     let localNextPage = nextPage;
-    if (typeof localNextPage === 'object') {
+    if (typeof localNextPage === "object") {
       localNextPage = nextPage.nativeEvent.position;
     }
 
     const currentPage = this.state.currentPage;
     this.updateSceneKeys({
       page: localNextPage,
-      callback: this._onChangeTab.bind(this, currentPage, localNextPage),
+      callback: this._onChangeTab.bind(this, currentPage, localNextPage)
     });
   },
 
@@ -308,12 +357,12 @@ const ScrollableTabView = createReactClass({
     this.props.onChangeTab({
       i: currentPage,
       ref: this._children()[currentPage],
-      from: prevPage,
+      from: prevPage
     });
   },
 
   _onScroll(e) {
-    if (Platform.OS === 'ios') {
+    if (Platform.OS === "ios") {
       const offsetX = e.nativeEvent.contentOffset.x;
       if (offsetX === 0 && !this.scrollOnMountCalled) {
         this.scrollOnMountCalled = true;
@@ -321,27 +370,34 @@ const ScrollableTabView = createReactClass({
         this.props.onScroll(offsetX / this.state.containerWidth);
       }
     } else {
-      const { position, offset, } = e.nativeEvent;
+      const { position, offset } = e.nativeEvent;
       this.props.onScroll(position + offset);
     }
   },
 
   _handleLayout(e) {
-    const { width, } = e.nativeEvent.layout;
+    const { width } = e.nativeEvent.layout;
 
-    if (!width || width <= 0 || Math.round(width) === Math.round(this.state.containerWidth)) {
+    if (
+      !width ||
+      width <= 0 ||
+      Math.round(width) === Math.round(this.state.containerWidth)
+    ) {
       return;
     }
 
-    if (Platform.OS === 'ios') {
+    if (Platform.OS === "ios" || Platform.OS === "web") {
       const containerWidthAnimatedValue = new Animated.Value(width);
       // Need to call __makeNative manually to avoid a native animated bug. See
       // https://github.com/facebook/react-native/pull/14435
       containerWidthAnimatedValue.__makeNative();
-      scrollValue = Animated.divide(this.state.scrollXIOS, containerWidthAnimatedValue);
-      this.setState({ containerWidth: width, scrollValue, });
+      scrollValue = Animated.divide(
+        this.state.scrollXIOS,
+        containerWidthAnimatedValue
+      );
+      this.setState({ containerWidth: width, scrollValue });
     } else {
-      this.setState({ containerWidth: width, });
+      this.setState({ containerWidth: width });
     }
     this.requestAnimationFrame(() => {
       this.goToPage(this.state.currentPage);
@@ -349,17 +405,19 @@ const ScrollableTabView = createReactClass({
   },
 
   _children(children = this.props.children) {
-    return React.Children.map(children, (child) => child);
+    return React.Children.map(children, child => child);
   },
 
   render() {
-    let overlayTabs = (this.props.tabBarPosition === 'overlayTop' || this.props.tabBarPosition === 'overlayBottom');
+    let overlayTabs =
+      this.props.tabBarPosition === "overlayTop" ||
+      this.props.tabBarPosition === "overlayBottom";
     let tabBarProps = {
       goToPage: this.goToPage,
-      tabs: this._children().map((child) => child.props.tabLabel),
+      tabs: this._children().map(child => child.props.tabLabel),
       activeTab: this.state.currentPage,
       scrollValue: this.state.scrollValue,
-      containerWidth: this.state.containerWidth,
+      containerWidth: this.state.containerWidth
     };
 
     if (this.props.tabBarBackgroundColor) {
@@ -379,28 +437,34 @@ const ScrollableTabView = createReactClass({
     }
     if (overlayTabs) {
       tabBarProps.style = {
-        position: 'absolute',
+        position: "absolute",
         left: 0,
         right: 0,
-        [this.props.tabBarPosition === 'overlayTop' ? 'top' : 'bottom']: 0,
+        [this.props.tabBarPosition === "overlayTop" ? "top" : "bottom"]: 0
       };
     }
 
-    return <View style={[styles.container, this.props.style, ]} onLayout={this._handleLayout}>
-      {this.props.tabBarPosition === 'top' && this.renderTabBar(tabBarProps)}
-      {this.renderScrollableContent()}
-      {(this.props.tabBarPosition === 'bottom' || overlayTabs) && this.renderTabBar(tabBarProps)}
-    </View>;
-  },
+    return (
+      <View
+        style={[styles.container, this.props.style]}
+        onLayout={this._handleLayout}
+      >
+        {this.props.tabBarPosition === "top" && this.renderTabBar(tabBarProps)}
+        {this.renderScrollableContent()}
+        {(this.props.tabBarPosition === "bottom" || overlayTabs) &&
+          this.renderTabBar(tabBarProps)}
+      </View>
+    );
+  }
 });
 
 module.exports = ScrollableTabView;
 
 const styles = StyleSheet.create({
   container: {
-    flex: 1,
+    flex: 1
   },
   scrollableContentAndroid: {
-    flex: 1,
-  },
+    flex: 1
+  }
 });
